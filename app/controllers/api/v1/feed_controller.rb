class Api::V1::FeedController < ApiController

  def ordered_by_creation
    # Very naive feed approach based simply on created at timestamp
    @posts = Post.order(created_at: :desc)

    render json: @posts.map{|post| post_json(post)}
  end

  def for_user
    # TODO: Implement a feed based on view status of a post and following status of the poster
    # Sort -> First, we want to prioritize posts that have not been viewed by current_user. Then, we want
    # to divide these unviewed posts into buckets based on the day of creation. Within each day we want to show
    # posts from users that the current_user follows first then other posts. After serving all unviewed posts
    # as described above, we can just served already viewed content based on post creation timestamp

    render json: @posts.map{|post| post_json(post)}
  end

  def top
    # TODO: Implement a feed based on overall popularity on the platform.
    # Sort -> We want to rank all posts based on a score generated by the following equation:
    # 3 * likes and 1 * views
    # However we also only want to show posts that have not been viewed by the current_user

    render json: @posts.map{|post| post_json(post)}
  end

  def custom
    # TODO: Construct a custom feed based on any logic that you think describes a well implemented feed.
    # The goal here is to provide a user a single feed of posts that is as tailored as possible to the user
    # and also to surface other popular content that they may have missed

    render json: @posts.map{|post| post_json(post)}
  end

  private

  def post_json(post)
    {
      id: post.id,
      content: post.content,
      view_count: post.views.count,
      like_count: post.likes.count,
      user: post_user_json(post.user),
      created_at: post.created_at,
    }
  end

  def post_user_json(user)
    {
      id: user.id,
      first_name: user.first_name,
      last_name: user.last_name
    }
  end

end
